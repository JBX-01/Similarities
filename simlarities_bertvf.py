# -*- coding: utf-8 -*-
"""simlarities_bertVF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a-KphKrTZYDn1UXcr54vjofkfzgcqMJd
"""

!pip install -U sentence-transformers

!pip install openpyxl

import openpyxl

from sentence_transformers import SentenceTransformer

from sentence_transformers import SentenceTransformer, util
model = SentenceTransformer('all-MiniLM-L6-v2')

from google.colab import files
import pandas as pd

# Upload the Excel files
uploaded_jira = files.upload()
uploaded_jira_path = list(uploaded_jira.keys())
extraction_jira_df = pd.read_excel(uploaded_jira_path[0], header=None, names=['Sujet'], skiprows=1, engine='openpyxl')
uploaded_usine = files.upload()
uploaded_usine_path = list(uploaded_usine.keys())
extraction_usine_df = pd.read_excel(uploaded_usine_path[0], header=None, names=['Sujet'], skiprows=1, engine='openpyxl')
# Print or use the dataframes as needed
if extraction_usine_df is not None:
    print("extraction_usine_df:")
    print(extraction_usine_df.head())

if extraction_jira_df is not None:
    print("\nextraction_jira_df:")
    print(extraction_jira_df.head())

# Read only column 'O' from extraction_usine.xlsx
extraction_usine_df = pd.read_excel(uploaded_usine_path[0], usecols=[14], engine='openpyxl')
print("extraction_usine.xlsx - Column 'O':")
print(extraction_usine_df)


# Read only columns 'A' and 'C' from extraction_jira.xlsx
extraction_jira_df = pd.read_excel(uploaded_jira_path[0], usecols=[0, 2], engine='openpyxl')
print("\nextraction_jira.xlsx - Columns 'A' and 'C':")
print(extraction_jira_df)

from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

# Assuming model is defined for text embedding

# Generate embeddings for the data in extraction_usine_df and extraction_jira_df
embeddings_usine = model.encode(extraction_usine_df['Décrire votre idée\n'].astype(str))
embeddings_jira = model.encode(extraction_jira_df['Sujet'].astype(str))

# Calculate cosine similarity between embeddings
similarity_matrix = cosine_similarity(embeddings_usine, embeddings_jira)

# Print similarities greater than or equal to 0.7
print("Similarities between 'Décrire votre idée\n' of extraction_usine_df and 'Sujet' of extraction_jira_df (Threshold: 70%):")
for i in range(similarity_matrix.shape[0]):
    for j in range(similarity_matrix.shape[1]):
        if similarity_matrix[i, j] >= 0.7:
            print("Similarity between sentence {} of extraction_usine_df ('Décrire votre idée\n') and sentence {} of extraction_jira_df ('Sujet'): {:.2f}".format(i+1, j+1, similarity_matrix[i, j]))

# Optionally, find the maximum similarity value and its corresponding indices
max_similarity = similarity_matrix.max()
max_indices = np.unravel_index(np.argmax(similarity_matrix, axis=None), similarity_matrix.shape)
print("\nMaximum similarity:", max_similarity)
print("Indices of the maximum similarity:", max_indices)
print("Sentence from extraction_usine_df ('Décrire votre idée\n'):", extraction_usine_df.iloc[max_indices[0], extraction_usine_df.columns.get_loc('Décrire votre idée\n')])
print("Sentence from extraction_jira_df ('Sujet'):", extraction_jira_df.iloc[max_indices[1], extraction_jira_df.columns.get_loc('Sujet')])

# Afficher les paires de phrases similaires avec une similarité supérieure ou égale à 70%
print("Phrases similaires avec une similarité supérieure ou égale à 70%:")
for i in range(similarity_matrix.shape[0]):
    for j in range(similarity_matrix.shape[1]):
        if similarity_matrix[i, j] >= 0.7:
            print("Phrase de extraction_usine.xlsx:", extraction_usine_df.iloc[i, 0])
            print("Phrase de extraction_jira.xlsx:", extraction_jira_df.iloc[j, 1])
            print("Code_jira.xlsx:", extraction_jira_df.iloc[j, 0])
            print("Similarité: {:.2f}".format(similarity_matrix[i, j]))
            print()

import openpyxl
from openpyxl.styles import Font

# Create a new workbook and select the active sheet
wb = openpyxl.Workbook()
ws = wb.active

# Define a function to write the header row
def write_header():
    ws.append(['Extraction USINE', 'Extraction JIRA', 'Code JIRA', 'Similarity Score'])
    header_font = Font(bold=True)
    for col in ws[1]:
        col.font = header_font

# Define a function to write the similarity results
def write_results():
    for i in range(similarity_matrix.shape[0]):
        for j in range(similarity_matrix.shape[1]):
            if similarity_matrix[i, j] >= 0.7:
                ws.append([extraction_usine_df.iloc[i, 0], extraction_jira_df.iloc[j, 1], extraction_jira_df.iloc[j, 0], similarity_matrix[i, j]])

# Write the header row
write_header()

# Write the similarity results
write_results()

# Save the workbook to an Excel file
wb.save('similarities.xlsx')

import ipywidgets as widgets
from IPython.display import display
import openpyxl
from openpyxl.styles import Font
import pandas as pd

# Define a function to import the Excel files
def import_files():
    # Import the Extraction USINE file
    extraction_usine_file = widgets.FileUpload(accept='.xlsx')
    uploaded_file = extraction_usine_file.get_widget_object()
    extraction_usine_df = pd.read_excel(uploaded_file['content'])

    # Import the Extraction JIRA file
    extraction_jira_file = widgets.FileUpload(accept='.xlsx')
    uploaded_file = extraction_jira_file.get_widget_object()
    extraction_jira_df = pd.read_excel(uploaded_file['content'])

    return extraction_usine_df, extraction_jira_df

# Define a function to generate the similarity results
def generate_results(extraction_usine_df, extraction_jira_df):
    # Create a new workbook and select the active sheet
    wb = openpyxl.Workbook()
    ws = wb.active

    # Define a function to write the header row
    def write_header():
        ws.append(['Extraction USINE', 'Extraction JIRA', 'Code JIRA', 'Similarity Score'])
        header_font = Font(bold=True)
        for col in ws[1]:
            col.font = header_font

    # Define a function to write the similarity results
    def write_results():
        for i in range(similarity_matrix.shape[0]):
            for j in range(similarity_matrix.shape[1]):
                if similarity_matrix[i, j] >= 0.7:
                    ws.append([extraction_usine_df.iloc[i, 0], extraction_jira_df.iloc[j, 1], extraction_jira_df.iloc[j, 0], similarity_matrix[i, j]])

    # Write the header row
    write_header()

    # Write the similarity results
    write_results()

    # Save the workbook to an Excel file
    wb.save('similarities.xlsx')

# Create a button to import the Excel files
import_button = widgets.Button(description="Import Excel Files")
import_button.on_click(import_files)

# Create a button to generate the similarity results
generate_button = widgets.Button(description="Generate Similarity Results")
generate_button.on_click(lambda x: generate_results(import_files()[0], import_files()[1]))

# Display the buttons
display(import_button, generate_button)